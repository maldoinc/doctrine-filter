<?php

namespace Maldoinc\Doctrine\Filter\Annotation;

/**
 * Mark fields that are available for filtering. When using this on fields which represent other entities (aka joins),
 * make sure the query builder already has a join with the same name as the field name or the serialized name otherwise
 * this field will not be available for filtering.
 *
 * Manually joining fields is a requirement and a design choice. The joined field only makes sense to filter if the
 * other entity is also present in the response.
 *
 * @Annotation
 *
 * @Target("PROPERTY")
 */
#[\Attribute(\Attribute::TARGET_PROPERTY)]
class Expose
{
    public ?string $serializedName = null;

    /** @var string[] */
    public array $operators = [];

    /**
     * @param string|array<string, mixed> $serializedName This is the name which you want your field to have in the
     *                                                    query string. Usually it will match the name that
     *                                                    is generated by some serializer. When using it on joined
     *                                                    fields make sure that the name here matches the join name
     *                                                    in the query builder.
     * @param string[] $operators this is the list of operators that are allowed in this field. Usage of this fields
     *                            for joined entities is a noop as the joined entity field will have its own list
     *                            of operators.
     */
    public function __construct($serializedName = null, array $operators = [])
    {
        // Doctrine annotation data is sent via a single param which contains a map with the arguments
        if (is_array($serializedName)) {
            /* @phpstan-ignore-next-line */
            $this->serializedName = $serializedName['serializedName'] ?? null;

            /* @phpstan-ignore-next-line */
            $this->operators = $serializedName['operators'] ?? [];

            return;
        }

        $this->serializedName = $serializedName;
        $this->operators = $operators;
    }
}
